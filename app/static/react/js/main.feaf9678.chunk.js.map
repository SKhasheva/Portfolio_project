{"version":3,"sources":["componets/ChartGoogle.js","componets/Currency.js","App.js","serviceWorker.js","index.js"],"names":["ChartGoogle","height","chartType","loader","data","options","chart","title","subtitle","rootProps","Currency","props","state","exchangeRate","console","log","this","svet","url","currency","fetch","then","response","json","setState","catch","error","className","Component","App","useState","isHome","setHome","isChartGoogle","setChartGoogle","id","href","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sQAkDeA,MA9Cf,WACI,OAEI,6BAIA,kBAAC,IAAD,CAEAC,OAAQ,QACRC,UAAU,OACVC,OAAQ,8CACRC,KAAM,CACJ,CACE,MACA,0BACA,eACA,mCAEF,CAAC,EAAG,KAAM,KAAM,MAChB,CAAC,EAAG,KAAM,KAAM,MAChB,CAAC,EAAG,KAAM,GAAI,MACd,CAAC,EAAG,KAAM,KAAM,MAChB,CAAC,EAAG,KAAM,KAAM,MAChB,CAAC,EAAG,IAAK,KAAM,KACf,CAAC,EAAG,IAAK,KAAM,KACf,CAAC,EAAG,KAAM,KAAM,MAChB,CAAC,EAAG,KAAM,KAAM,MAChB,CAAC,GAAI,KAAM,KAAM,MACjB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,MAEjBC,QAAS,CACPC,MAAO,CACLC,MAAO,oDACPC,SAAU,iCAGdC,UAAW,CAAE,cAAe,S,4BCUrBC,E,kDAlDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,aAAc,IAHH,E,gEAQF,IAAD,OAEhBC,QAAQC,IAAIC,KAAKL,MAAMM,MACvB,IAAMC,EAAG,0FAAsFF,KAAKL,MAAMQ,SAAjG,4CAETC,MAAMF,GACLG,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACjB,GACL,EAAKoB,SAAS,CACZX,aAAcT,EAAK,wCAGtBqB,OAAM,SAACC,GAAD,OAAWZ,QAAQC,IAAIW,Q,+BAI9B,OACI,yBAAKC,UAAU,gBAAf,qBAEI,6BACA,6BACA,+BACI,4BACI,2CACA,4BAAKX,KAAKJ,MAAMC,aAAa,uBAEjC,4BACI,iCAAOG,KAAKJ,MAAMC,aAAa,0BAC/B,4BAAKG,KAAKJ,MAAMC,aAAa,oBAA7B,UAGR,kC,GA1CWe,aCsERC,MAjEf,WAAgB,IAAD,EAGYC,mBAAS,+BAHrB,mBAGPC,EAHO,KAGCC,EAHD,OAI2BF,mBAAS,+BAJpC,mBAING,EAJM,KAISC,EAJT,KA6Bb,OACE,6BACC,4BAAQC,GAAG,QACR,6BACI,uBAAGC,KAAK,GAAGD,GAAG,cACd,4BACI,6BACA,4BACI,uBAAGC,KAAK,QAAQC,QA7BlC,WACEL,EAAQ,6BACI,kBAAC,EAAD,CAAUb,SAAS,QACnB,kBAAC,EAAD,CAAUA,SAAS,UAE/Be,EAAe,iCAwBC,SAEJ,6BACA,4BACI,uBAAGE,KAAK,SAASC,QAjBnC,WACEH,EAAe,kBAAC,EAAD,OACfF,EAAQ,iCAeQ,UAEJ,6BACA,4BACI,uBAAGI,KAAK,WAAWC,QAAS,+BAA5B,YAEJ,6BACA,4BACI,uBAAGD,KAAK,KAAR,eAOd,6BACCL,EACAE,ICtDaK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLZ,QAAQY,MAAMA,EAAM2B,c","file":"js/main.feaf9678.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n//import Media from 'react-media';\r\nimport Chart from \"react-google-charts\";\r\n\r\nfunction ChartGoogle() {\r\n    return (\r\n\r\n        <div>\r\n            \r\n       \r\n        \r\n        <Chart\r\n        \r\n        height={'500px'}\r\n        chartType=\"Line\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={[\r\n          [\r\n            'Day',\r\n            'Guardians of the Galaxy',\r\n            'The Avengers',\r\n            'Transformers: Age of Extinction',\r\n          ],\r\n          [1, 37.8, 80.8, 41.8],\r\n          [2, 30.9, 69.5, 32.4],\r\n          [3, 25.4, 57, 25.7],\r\n          [4, 11.7, 18.8, 10.5],\r\n          [5, 11.9, 17.6, 10.4],\r\n          [6, 8.8, 13.6, 7.7],\r\n          [7, 7.6, 12.3, 9.6],\r\n          [8, 12.3, 29.2, 10.6],\r\n          [9, 16.9, 42.9, 14.8],\r\n          [10, 12.8, 30.9, 11.6],\r\n          [11, 5.3, 7.9, 4.7],\r\n          [12, 6.6, 8.4, 5.2],\r\n          [13, 4.8, 6.3, 3.6],\r\n          [14, 4.2, 6.2, 3.4],\r\n        ]}\r\n        options={{\r\n          chart: {\r\n            title: 'Box Office Earnings in First Two Weeks of Opening',\r\n            subtitle: 'in millions of dollars (USD)',\r\n          },\r\n        }}\r\n        rootProps={{ 'data-testid': '3' }}\r\n      />\r\n      </div>\r\n    );\r\n  };\r\n  \r\nexport default ChartGoogle;","\r\nimport React, { Component, useEffect } from 'react';\r\n\r\nclass Currency extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            exchangeRate: [],\r\n        };\r\n      }\r\n    \r\n\r\ncomponentDidMount() {\r\n    //const url = 'https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=ILS&apikey=PA9D235Y6KPZ46HS';\r\n    console.log(this.props.svet);\r\n    const url = `https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=${this.props.currency}&to_currency=ILS&apikey=PA9D235Y6KPZ46HS`;\r\n\r\n    fetch(url)\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      this.setState({\r\n        exchangeRate: data[\"Realtime Currency Exchange Rate\"]\r\n      })\r\n    })\r\n    .catch((error) => console.log(error));\r\n    }\r\n\r\nrender() {\r\n    return (\r\n        <div className='ExchangeRate'>\r\n            tttttttttttttttttt\r\n            <br />\r\n            <br />\r\n            <table >\r\n                <tr>\r\n                    <th>Update time</th>\r\n                    <td>{this.state.exchangeRate[\"6. Last Refreshed\"]}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>1 {this.state.exchangeRate['1. From_Currency Code']}</th>\r\n                    <td>{this.state.exchangeRate['5. Exchange Rate']} ILS</td>\r\n                </tr>\r\n            </table>        \r\n            <br />   \r\n        </div> \r\n        )\r\n    }\r\n}\r\n\r\n\r\n \r\n\r\nexport default Currency;","\nimport React, { useState }  from 'react';\nimport './css/App.css';\nimport ChartGoogle from './componets/ChartGoogle';\nimport Currency from './componets/Currency';\n\n\n\nfunction App() {\n\n\n  const[isHome, setHome] = useState(<div></div>);\n  const [isChartGoogle, setChartGoogle] = useState(<div></div>);\n  \n\n\n  function showHome() {\n    setHome(<div>\n                <Currency currency='EUR'/>\n                <Currency currency='USD'/>\n            </div>);\n    setChartGoogle(<div></div>);\n  } \n  \n\n /* function showHome() {\n  setHome(<div>\n              rrrrrr\n          </div>);\n  setChartGoogle(<div></div>);\n} */\n\n  function showChartGoogle() {\n    setChartGoogle(<ChartGoogle />);\n    setHome(<div></div>);\n  }\n\n  return (\n    <div>\n     <header id=\"grid\">\n        <nav>\n            <a href=\"\" id=\"menu-icon\"></a>\n            <ul>\n                <li></li>\n                <li>\n                    <a href=\"#Home\" onClick={showHome}>Home</a>\n                </li>\n                <li></li>\n                <li>\n                    <a href=\"#Chart\" onClick={showChartGoogle}>Chart</a>\n                </li>\n                <li></li>\n                <li>\n                    <a href=\"#Details\" onClick={<div></div>}>Details</a>\n                </li>\n                <li></li>\n                <li>\n                    <a href=\"#\">Contact</a>\n                </li>\n                \n            </ul>\n        </nav>\n        \n      </header> \n      <br />\n      {isHome}\n      {isChartGoogle} \n    \n    </div>\n  )\n\n}\n\nexport default App;\n\n\n\n  \n\n\n\n/*\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n*/\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}