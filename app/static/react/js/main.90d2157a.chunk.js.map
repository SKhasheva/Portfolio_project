{"version":3,"sources":["componets/ChartGoogle.js","componets/Currency.js","componets/DetailedPortfolio.js","App.js","serviceWorker.js","index.js"],"names":["ChartGoogle","state","data","fetch","then","response","json","setState","catch","error","console","log","dataChart","this","element","push","style","display","length","height","chartType","loader","options","title","colors","backgroundColor","hAxis","vAxis","rootProps","Component","Currency","props","exchangeRate","url","currency","className","DetailedPortfolio","myShares","mySharesValues","listSharesMOEX","newShares","newSharesValues","showTableHeader","investedMoney","handleSubmit","bind","unshift","i","event","values","target","name","value","finalList","cnt","Number","isNaN","parseFloat","parseInt","ticker","price","money","calculateInvested","method","body","JSON","stringify","headers","status","alert","resetForm","classState","map","row","key","curcost","toFixed","type","onChange","handleChange","optionItems","el","handleNew","selectOptions","min","onClick","removeClick","shares","val","substring","prevState","splice","id","onSubmit","createUI","createUIForNew","addClick","App","useState","isHome","setHome","isChartGoogle","setChartGoogle","isDetails","setDetails","userName","setUserName","useEffect","text","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"js/main.90d2157a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Chart from \"react-google-charts\";\r\n\r\nclass ChartGoogle extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data : []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = 'http://127.0.0.1:5000/chart/';\r\n\r\n    fetch(url)\r\n    .then(\r\n      (response) => {\r\n        return response.json();\r\n      })\r\n    .then(json => {\r\n      this.setState({\r\n        data: json\r\n      })\r\n    })\r\n    .catch((error) => console.log(error));\r\n  }\r\n\r\n  render() {\r\n    let dataChart= [\r\n        [\r\n          'Date',\r\n          'Invested',\r\n          'Portfolio',\r\n        ]\r\n      ];\r\n      for (let element of this.state.data) {\r\n          dataChart.push([element[\"date\"], element[\"invested\"], element[\"portfolioCost\"]])\r\n        }\r\n\r\n      return (\r\n        <div>\r\n      \r\n          <p style={{display: this.state.data.length ? 'none' : 'block'}}>No data to show</p>\r\n\r\n          <div style = {{display: this.state.data.length ? 'block' : 'none' }}>\r\n          <Chart\r\n            height={'500px'}\r\n            chartType=\"LineChart\"\r\n            loader={<div>Loading Chart</div>}\r\n            data = {dataChart}\r\n            options={{\r\n              title: 'Cost of Portfolio vs Invested money',\r\n              colors: ['#D700CD', '#1D19DB'],\r\n              backgroundColor: '#ddd3e2',\r\n                hAxis: {\r\n                  title: 'Date',\r\n                    },\r\n                vAxis: {\r\n                  title: 'Cost',\r\n                    },\r\n                }}\r\n            rootProps={{ 'data-testid': '2' }}/>\r\n          </div>\r\n\r\n        </div>\r\n        );\r\n      };\r\n  }\r\n  \r\nexport default ChartGoogle;","\r\nimport React, { Component} from 'react';\r\n\r\nclass Currency extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            exchangeRate: []\r\n        };\r\n      }\r\n    \r\n\r\ncomponentDidMount() {\r\n    //const url = 'https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=ILS&apikey=PA9D235Y6KPZ46HS';\r\n    //console.log(this.props.svet);\r\n    const url = `https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=${this.props.currency}&to_currency=ILS&apikey=PA9D235Y6KPZ46HS`;\r\n\r\n    fetch(url)\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      this.setState({\r\n        exchangeRate: data[\"Realtime Currency Exchange Rate\"]\r\n      })\r\n    })\r\n    .catch((error) => console.log(error));\r\n    }\r\n\r\nrender() {\r\n    return (\r\n        <div className='ExchangeRate'>\r\n            <br />\r\n            <br />\r\n            <table >\r\n                <tr>\r\n                    <th>Update time</th>\r\n                    <td>{this.state.exchangeRate[\"6. Last Refreshed\"]}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>1 {this.state.exchangeRate['1. From_Currency Code']}</th>\r\n                    <td>{this.state.exchangeRate['5. Exchange Rate']} ILS</td>\r\n                </tr>\r\n            </table>        \r\n            <br />   \r\n        </div> \r\n        )\r\n    }\r\n}\r\n\r\n\r\n \r\n\r\nexport default Currency;","import React, { Component}  from 'react';\r\n\r\nclass DetailedPortfolio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            myShares : [],\r\n            mySharesValues: [],\r\n            listSharesMOEX: [],\r\n            newShares: [],\r\n            newSharesValues: [],\r\n            showTableHeader: false,\r\n            investedMoney: 0,\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = 'http://127.0.0.1:5000/portfolio_details';\r\n\r\n        fetch(url)\r\n        .then(\r\n          (response) => {\r\n            return response.json();\r\n          })\r\n        .then(json => {\r\n          this.setState({\r\n            myShares: json\r\n          })\r\n        })\r\n        .catch((error) => console.log(error));\r\n\r\n        const urlShares = 'http://127.0.0.1:5000/shareslist';\r\n\r\n        fetch(urlShares)\r\n        .then(\r\n          (response) => {\r\n            return response.json();\r\n          })\r\n        .then(json => {\r\n          json.unshift({\"name\":\"\",\"price\":\"\",\"ticker\":\"Choose from the list\"})\r\n          this.setState({\r\n            listSharesMOEX: json\r\n          })\r\n        })\r\n        .catch((error) => console.log(error));\r\n\r\n      }  \r\n\r\n\r\n\r\n\r\n      handleChange(i, event) {\r\n        let values = (event.target.name === 'mySharesValues'? [...this.state.mySharesValues]: [...this.state.newSharesValues]) \r\n\r\n          values[i] = event.target.value;\r\n          let name = event.target.name;\r\n          this.setState({\r\n              [name]: values\r\n          })\r\n         console.log(this.state.mySharesValues);\r\n         console.log(this.state.newSharesValues);\r\n\r\n      }\r\n      \r\n\r\n\r\n\r\n      handleSubmit(event) {\r\n          // make the list of old and new shares\r\n          // send it to backend\r\n          \r\n          let finalList=[];\r\n          let cnt = 0;\r\n\r\n          //Processing existing shares. If there is new count => sum previous and new shares\r\n          //if no new count => leave the olf count\r\n\r\n          console.log(this.state.myShares)\r\n          console.log(this.state.mySharesValues)\r\n        \r\n          for (let i=0; i<this.state.myShares.length; i++) {\r\n            if (!Number.isNaN(parseFloat(this.state.mySharesValues[i]))) {\r\n                cnt = parseInt(this.state.mySharesValues[i])\r\n                finalList.push({\r\n                    'ticker': this.state.myShares[i].ticker,\r\n                    'price':  this.state.myShares[i].price,\r\n                    'cnt': cnt\r\n                        }) \r\n            };\r\n            \r\n                console.log(finalList)   \r\n        }\r\n           \r\n           //Processing new shares list\r\n           //If user didn't enter any count => we do not add this share to the list\r\n\r\n           for (let i=0; i<this.state.newShares.length; i++) {\r\n            if (!Number.isNaN(parseFloat(this.state.newSharesValues[i]))) {\r\n                finalList.push({\r\n                    'ticker': this.state.newShares[i].ticker,\r\n                    'price':  this.state.newShares[i].price,\r\n                    'cnt': parseInt(this.state.newSharesValues[i])\r\n                        }) \r\n                } \r\n            };\r\n\r\n            /// add invested\r\n            let money = this.calculateInvested();\r\n            finalList.push({\r\n              'invested': money\r\n            })\r\n\r\n            \r\n            \r\n            fetch('http://127.0.0.1:5000/dataupdate/',{\r\n        method: \"POST\",\r\n        body: JSON.stringify(finalList),\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n      }).then((response)=>{\r\n           console.log(response);\r\n           console.log(response.status);\r\n      if (response.status === 200){\r\n        alert(\"Message Sent.\"); \r\n        this.resetForm()\r\n      }else if(response.status === 400){\r\n        alert(\"Message failed to send.\")\r\n      }\r\n    })\r\n    \r\n/*\r\n            fetch('http://127.0.0.1:5000/dataupdate/', {\r\n                method: 'POST',\r\n                body: finalList,\r\n              });\r\n            */\r\n\r\n            console.log(finalList);\r\n         //   event.preventDefault();\r\n\r\n           // alert('Successful');\r\n\r\n\r\n\r\n    }   \r\n          \r\n    \r\n\r\n\r\n      createUI(){\r\n            const classState = this\r\n          return this.state.myShares.map((row, i) =>\r\n            <tr key={i}>\r\n                <td>{row.ticker}</td>\r\n                <td>{row.cnt}</td>\r\n                <td>{row.price}</td>\r\n                <td>{row.curcost.toFixed(2)}</td>\r\n                <td><input name='mySharesValues' type=\"number\" value={classState.state.mySharesValues[i]||''} onChange={classState.handleChange.bind(this, i)}/></td>\r\n            </tr>   \r\n           \r\n          )\r\n      }\r\n\r\n// add new elements\r\n\r\n\r\n\r\n\r\n\r\nselectOptions() {\r\n\r\n    const classState = this;\r\n    let shares = classState.state.listSharesMOEX;\r\n    let optionItems = shares.map((el) =>\r\n        <option key={el.ticker}>{el.ticker} - {el.price}</option>\r\n    );\r\n    console.log(optionItems);\r\n    return optionItems;\r\n}\r\n\r\n\r\ncreateUIForNew(){\r\n    const classState = this\r\n    return classState.state.newSharesValues.map((el, i) => \r\n        <tr key={i}>\r\n          <td> <select  onChange={classState.handleNew.bind(this, i)} >\r\n           {classState.selectOptions()}\r\n            </select> \r\n            </td>\r\n            <td>\r\n            <input type=\"number\" name='newSharesValues' min='0' value={classState.state.newSharesValues[i]||''} onChange={classState.handleChange.bind(this, i)}/>\r\n            </td>\r\n            <td>\r\n           <input type='button' value='remove' onClick={classState.removeClick.bind(this, i)}/>\r\n            </td>\r\n        </tr>          \r\n    )\r\n }\r\n\r\n handleNew(i, event) {\r\n    let shares = [...this.state.newShares];\r\n    let val = event.target.value;\r\n    shares[i] = {ticker: val.substring(0, 5), price: val.substring(7)};\r\n    \r\n    this.setState({  //myShares: this.state.myShares, \r\n        //mySharesValues : this.state.mySharesValues,\r\n       // listSharesMOEX: this.state.listSharesMOEX,\r\n     newShares: shares});\r\n }\r\n \r\n addClick(){\r\n   this.setState(prevState => ({\r\n    showTableHeader: true,\r\n   // myShares: this.state.myShares, \r\n   // mySharesValues : this.state.mySharesValues,\r\n   // listSharesMOEX: this.state.listSharesMOEX,\r\n    newSharesValues: [...prevState.newSharesValues, '']}))\r\n }\r\n \r\n \r\n removeClick(i){\r\n    let newSharesValues = [...this.state.newSharesValues];\r\n    newSharesValues.splice(i,1);\r\n    this.setState({\r\n        //myShares: this.state.myShares, \r\n        //mySharesValues : this.state.mySharesValues,\r\n        //listSharesMOEX: this.state.listSharesMOEX,\r\n        newSharesValues });\r\n }\r\n \r\n     \r\n\r\n      calculateInvested(){\r\n        // calculated the total money that would be invested\r\n          let money=0.0;\r\n          // calculating cost of added/removed shares from portfolio\r\n          for (let i=0; i<this.state.mySharesValues.length; i++) {\r\n              if (!Number.isNaN(parseFloat(this.state.mySharesValues[i]))) {\r\n                money += parseFloat(this.state.myShares[i].price)*parseFloat(this.state.mySharesValues[i])\r\n              }\r\n          }\r\n          // calculating cost of the new shares\r\n          for (let i=0; i<this.state.newSharesValues.length; i++) {\r\n              if (!Number.isNaN(parseFloat(this.state.newSharesValues[i]))) {\r\n                  money += parseFloat(this.state.newShares[i].price)*parseFloat(this.state.newSharesValues[i])\r\n                    }\r\n                }\r\n            money = money.toFixed(2);\r\n            return money;\r\n      }\r\n\r\n\r\n      render() {\r\n     \r\n      return (\r\n        <div id='Details'>\r\n            <br />\r\n            <div></div>\r\n            <form onSubmit={this.handleSubmit}>\r\n            <table style={{display: this.state.myShares.length ? 'block' : 'none' }}>\r\n                <tr>\r\n                    <th className=\"tooltip\">Ticker\r\n                      <span className=\"tooltiptext\">Symbol of FTE used in Moscow Exchange</span>\r\n                    </th>\r\n\r\n                    <th className=\"tooltip\">Count\r\n                      <span className=\"tooltiptext\">Number of shares in portfolio</span>\r\n                    </th>\r\n                    <th className=\"tooltip\">Current Price (per 1)\r\n                      <span className=\"tooltiptext\">Current price of 1 share</span>\r\n                    </th>\r\n                    <th className=\"tooltip\">Current Cost\r\n                      <span className=\"tooltiptext\">Current cost in Portfolio according to MOEX price</span>\r\n                    </th>\r\n                    <th className=\"tooltip\">Buy/Sell Amount\r\n                      <span className=\"tooltiptext\">Incert positive number to buy or negative number to sell</span>\r\n                    </th>\r\n                </tr>               \r\n                {this.createUI()}\r\n            </table>\r\n           <br />\r\n           <table  id='newShares' style={{display: this.state.showTableHeader ? 'block' : 'none' }}>\r\n               <tr>\r\n                   <th className=\"tooltip\">Ticker with price\r\n                    <span className=\"tooltiptext\">Choose FTE from the list. Format: Ticket - Price</span>\r\n                   </th>\r\n                   <th className=\"tooltip\">Buy Amount\r\n                    <span className=\"tooltiptext\">Incert number of shares (only positive!) to buy</span>\r\n                   </th>\r\n                   <th></th>\r\n               </tr>\r\n              {this.createUIForNew()}\r\n            </table>\r\n            <input type='button'  value='add new shares' onClick={this.addClick.bind(this)}\r\n            />\r\n            <br />\r\n            <hr />\r\n            <br />\r\n            <p className=\"tooltip\"> Total amount to invest:\r\n            <span className=\"tooltiptext\">Total sum to invest</span>\r\n            </p>\r\n            <div>{this.calculateInvested()}</div>\r\n            <br />\r\n            <hr />\r\n            <input id='Buy' type=\"submit\" value=\"Buy Shares\" />\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n    }\r\n}\r\n\r\n   \r\n\r\n\r\nexport default DetailedPortfolio\r\n\r\n","\nimport React, { useState, useEffect }  from 'react';\nimport './css/App.css';\nimport ChartGoogle from './componets/ChartGoogle';\nimport Currency from './componets/Currency';\nimport DetailedPortfolio from './componets/DetailedPortfolio';\n\n\n\nfunction App() {\n\n\n  const[isHome, setHome] = useState(<div></div>);\n  const [isChartGoogle, setChartGoogle] = useState(<div></div>);\n  const [isDetails, setDetails] = useState(<div></div>);\n  const [userName, setUserName] = useState('');\n\n\n  function showHome() {\n    setHome(<div>\n                <Currency currency='EUR'/>\n                <Currency currency='USD'/>\n            </div>);\n    setChartGoogle(<div></div>);\n    setDetails(<div></div>)\n  } \n  \n\n  function showChartGoogle() {\n    setChartGoogle(<ChartGoogle />);\n    setHome(<div></div>);\n    setDetails(<div></div>)\n  }\n\n\n  function showDetails() {\n    setChartGoogle(<div></div>);\n    setHome(<div></div>);\n    setDetails(<DetailedPortfolio />)\n    //console.log(new Data().render())\n  }\n\n  //logout\n  function handleLogout() {\n    const url = 'http://127.0.0.1:5000/logout/';\n    fetch(url)\n    .then(\n      (response) => {\n        return response.json();\n      })\n    .then(json => {\n      return json\n    })\n    .catch((error) => console.log(error));\n  }\n\n  //get user name\n  useEffect(() =>{\n    const url = 'http://127.0.0.1:5000/username/';\n    fetch(url)\n    .then(\n      (response) => {\n        return response.text();\n      })\n    .then(json => {\n      setUserName(json);\n    })\n    .catch((error) => console.log(error));\n  })\n\n  return (\n    <div>\n     <header id=\"grid\">\n\n          <div id=\"user\" >\n          {userName}     \n           <a id=\"logout\" href=\"http://127.0.0.1:5000/\" onClick={handleLogout}> LogOut</a>\n          </div>\n\n          \n\n        <nav>\n            <a href=\"\" id=\"menu-icon\"></a>\n            <ul>\n                <li></li>\n                <li>\n                    <a href=\"#Home\" onClick={showHome}>Home</a>\n                </li>\n                <li></li>\n                <li>\n                    <a href=\"#Chart\" onClick={showChartGoogle}>Chart</a>\n                </li>\n                <li></li>\n                <li>\n                    <a href=\"#Details\" onClick={showDetails}>Details</a>\n                </li>\n                <li></li>\n                <li>\n                    <a href=\"#\">Contact</a>\n                </li>\n                \n            </ul>\n        </nav>\n        \n      </header> \n      <br />\n      {isHome}\n      {isChartGoogle}\n      {isDetails} \n      \n    \n    </div>\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}