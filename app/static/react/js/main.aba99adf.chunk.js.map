{"version":3,"sources":["componets/ChartGoogle.js","componets/Currency.js","componets/ExchangeRate.js","componets/DetailedPortfolio.js","App.js","serviceWorker.js","index.js"],"names":["ChartGoogle","state","data","fetch","then","response","json","setState","catch","error","console","log","dataChart","this","element","push","id","style","display","length","height","chartType","loader","options","title","colors","backgroundColor","hAxis","vAxis","rootProps","Component","Currency","props","exchangeRate","url","currency","className","ExchangeRate","DetailedPortfolio","myShares","mySharesValues","listSharesMOEX","newShares","newSharesValues","showTableHeader","investedMoney","handleSubmit","bind","unshift","classState","map","row","i","key","ticker","cnt","price","curcost","toFixed","name","type","value","onChange","handleChange","el","handleNew","selectOptions","min","onClick","removeClick","event","values","target","shares","val","substring","prevState","splice","money","Number","isNaN","parseFloat","finalList","parseInt","method","body","JSON","stringify","headers","status","alert","resetForm","preventDefault","onSubmit","createUI","createUIForNew","addClick","calculateInvested","App","useState","isHome","setHome","isChartGoogle","setChartGoogle","isDetails","setDetails","userName","setUserName","useEffect","text","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4SAqEeA,E,kDAjEb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,KAAO,IAHG,E,gEAOO,IAAD,OAGlBC,MAFY,gCAGXC,MACC,SAACC,GACC,OAAOA,EAASC,UAEnBF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACZL,KAAMI,OAGTE,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,Q,+BAI9B,IADO,EACHG,EAAW,CACX,CACE,OACA,WACA,cALC,cAQeC,KAAKZ,MAAMC,MAR1B,IAQL,2BAAqC,CAAC,IAA7BY,EAA4B,QACjCF,EAAUG,KAAK,CAACD,EAAO,KAAUA,EAAO,SAAcA,EAAO,iBAT5D,8BAYL,OACE,6BACE,yBAAKE,GAAG,QACN,uBAAGC,MAAO,CAACC,QAASL,KAAKZ,MAAMC,KAAKiB,OAAS,OAAS,UAAtD,oBAEF,yBAAKF,MAAS,CAACC,QAASL,KAAKZ,MAAMC,KAAKiB,OAAS,QAAU,SAC3D,kBAAC,IAAD,CACEC,OAAQ,QACRC,UAAU,YACVC,OAAQ,8CACRpB,KAAQU,EACRW,QAAS,CACPC,MAAO,sCACPC,OAAQ,CAAC,UAAW,WACpBC,gBAAiB,UACfC,MAAO,CACLH,MAAO,QAETI,MAAO,CACLJ,MAAO,SAGbK,UAAW,CAAE,cAAe,a,GA1DdC,aC+CXC,E,kDA9CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACD/B,MAAQ,CACTgC,aAAc,IAHH,E,gEAOF,IAAD,OACVC,EAAG,0FAAsFrB,KAAKmB,MAAMG,SAAjG,4CAEThC,MAAM+B,GACL9B,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACF,GACL,EAAKK,SAAS,CACZ0B,aAAc/B,EAAK,wCAGtBM,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,Q,+BAI9B,OACI,yBAAK2B,UAAU,gBACX,6BACA,6BACA,+BACI,4BACI,gDACA,4BAAKvB,KAAKZ,MAAMgC,aAAa,uBAEjC,4BACI,iCAAOpB,KAAKZ,MAAMgC,aAAa,0BAC/B,4BAAKpB,KAAKZ,MAAMgC,aAAa,oBAA7B,UAGR,kC,GAtCWH,aCYRO,MAXf,WAEG,OACC,yBAAKrB,GAAG,gBACJ,oDACA,kBAAC,EAAD,CAAUmB,SAAS,QACnB,kBAAC,EAAD,CAAUA,SAAS,U,sBC0QZG,E,kDAjRX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACD/B,MAAQ,CACTsC,SAAW,GACXC,eAAgB,GAChBC,eAAgB,GAChBC,UAAW,GACXC,gBAAiB,GACjBC,iBAAiB,EACjBC,cAAe,GAEnB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAXL,E,gEAcE,IAAD,OAKhB5C,MAFY,2CAGXC,MACC,SAACC,GACC,OAAOA,EAASC,UAEnBF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACZgC,SAAUjC,OAGbE,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAK9BN,MAFkB,oCAGjBC,MACC,SAACC,GACC,OAAOA,EAASC,UAEnBF,MAAK,SAAAE,GACJA,EAAK0C,QAAQ,CAAC,KAAO,GAAG,MAAQ,GAAG,OAAS,yBAC5C,EAAKzC,SAAS,CACZkC,eAAgBnC,OAGnBE,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,Q,iCAKrB,IAAD,OACFwC,EAAapC,KACrB,OAAOA,KAAKZ,MAAMsC,SAASW,KAAI,SAACC,EAAKC,GAAN,OAC7B,wBAAIC,IAAKD,GACL,4BAAKD,EAAIG,QACT,4BAAKH,EAAII,KACT,4BAAKJ,EAAIK,OACT,4BAAKL,EAAIM,QAAQC,QAAQ,IACzB,4BAAI,2BAAOC,KAAK,iBAAiBC,KAAK,SAASC,MAAOZ,EAAWhD,MAAMuC,eAAeY,IAAI,GAAIU,SAAUb,EAAWc,aAAahB,KAAK,EAAMK,Y,uCAMhI,IAAD,OACRH,EAAapC,KACnB,OAAOoC,EAAWhD,MAAM0C,gBAAgBO,KAAI,SAACc,EAAIZ,GAAL,OACxC,wBAAIC,IAAKD,GACP,4BACE,4BAASU,SAAUb,EAAWgB,UAAUlB,KAAK,EAAMK,IAClDH,EAAWiB,kBAGd,4BACE,2BAAON,KAAK,SAASD,KAAK,kBAAkBQ,IAAI,IAAIN,MAAOZ,EAAWhD,MAAM0C,gBAAgBS,IAAI,GAAIU,SAAUb,EAAWc,aAAahB,KAAK,EAAMK,MAEnJ,4BACE,2BAAOQ,KAAK,SAASC,MAAM,SAASO,QAASnB,EAAWoB,YAAYtB,KAAK,EAAMK,Y,mCAQ5EA,EAAGkB,GACd,IAAIC,EAAgC,mBAAtBD,EAAME,OAAOb,KAAb,YAA4C9C,KAAKZ,MAAMuC,gBAAvD,YAA4E3B,KAAKZ,MAAM0C,iBACrG4B,EAAOnB,GAAKkB,EAAME,OAAOX,MACzB,IAAIF,EAAOW,EAAME,OAAOb,KACxB9C,KAAKN,SAAL,eACGoD,EAAOY,M,sCAaV,OALmB1D,KACKZ,MAAMwC,eACLS,KAAI,SAACc,GAAD,OACzB,4BAAQX,IAAKW,EAAGV,QAASU,EAAGV,OAA5B,MAAuCU,EAAGR,Y,gCAOtCJ,EAAGkB,GACX,IAAIG,EAAM,YAAO5D,KAAKZ,MAAMyC,WACxBgC,EAAMJ,EAAME,OAAOX,MACvBY,EAAOrB,GAAK,CAACE,OAAQoB,EAAIC,UAAU,EAAG,GAAInB,MAAOkB,EAAIC,UAAU,IAC/D9D,KAAKN,SAAS,CACZmC,UAAW+B,M,iCAOb5D,KAAKN,UAAS,SAAAqE,GAAS,MAAK,CAC3BhC,iBAAiB,EACjBD,gBAAgB,GAAD,mBAAMiC,EAAUjC,iBAAhB,CAAiC,W,kCAMvCS,GACT,IAAIT,EAAe,YAAO9B,KAAKZ,MAAM0C,iBACrCA,EAAgBkC,OAAOzB,EAAE,GACzBvC,KAAKN,SAAS,CACZoC,sB,0CAQH,IAFA,IAAImC,EAAM,EAED1B,EAAE,EAAGA,EAAEvC,KAAKZ,MAAMuC,eAAerB,OAAQiC,IAC3C2B,OAAOC,MAAMC,WAAWpE,KAAKZ,MAAMuC,eAAeY,OACrD0B,GAASG,WAAWpE,KAAKZ,MAAMsC,SAASa,GAAGI,OAAOyB,WAAWpE,KAAKZ,MAAMuC,eAAeY,KAI3F,IAAK,IAAIA,EAAE,EAAGA,EAAEvC,KAAKZ,MAAM0C,gBAAgBxB,OAAQiC,IAC5C2B,OAAOC,MAAMC,WAAWpE,KAAKZ,MAAM0C,gBAAgBS,OACtD0B,GAASG,WAAWpE,KAAKZ,MAAMyC,UAAUU,GAAGI,OAAOyB,WAAWpE,KAAKZ,MAAM0C,gBAAgBS,KAI7F,OADA0B,EAAQA,EAAMpB,QAAQ,K,mCAMXY,GAOX,IAPmB,IAAD,OACdY,EAAU,GACV3B,EAAM,EAKDH,EAAE,EAAGA,EAAEvC,KAAKZ,MAAMsC,SAASpB,OAAQiC,IACrC2B,OAAOC,MAAMC,WAAWpE,KAAKZ,MAAMuC,eAAeY,OACnDG,EAAM4B,SAAStE,KAAKZ,MAAMuC,eAAeY,IACzC8B,EAAUnE,KAAK,CACT,OAAUF,KAAKZ,MAAMsC,SAASa,GAAGE,OACjC,MAAUzC,KAAKZ,MAAMsC,SAASa,GAAGI,MACjC,IAAOD,KAQnB,IAAK,IAAIH,EAAE,EAAGA,EAAEvC,KAAKZ,MAAMyC,UAAUvB,OAAQiC,IACtC2B,OAAOC,MAAMC,WAAWpE,KAAKZ,MAAM0C,gBAAgBS,MACpD8B,EAAUnE,KAAK,CACT,OAAUF,KAAKZ,MAAMyC,UAAUU,GAAGE,OAClC,MAAUzC,KAAKZ,MAAMyC,UAAUU,GAAGI,MAClC,IAAO2B,SAAStE,KAAKZ,MAAM0C,gBAAgBS,MAavDjD,MAAM,oCACN,CACEiF,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,GACrBM,QAAS,CACP,OAAU,mBACV,eAAgB,sBAEfpF,MACD,SAACC,GACyB,MAApBA,EAASoF,QACbC,MAAM,iBACN,EAAKC,aAC0B,MAApBtF,EAASoF,QAClBC,MAAM,8BAGZpB,EAAMsB,mB,+BAKV,OACE,yBAAK5E,GAAG,WACJ,6BACA,0BAAM6E,SAAUhF,KAAKiC,cACnB,2BAAO7B,MAAO,CAACC,QAASL,KAAKZ,MAAMsC,SAASpB,OAAS,QAAU,SAC7D,4BACI,wBAAIiB,UAAU,WAAd,SACE,0BAAMA,UAAU,eAAhB,0CAEF,wBAAIA,UAAU,WAAd,QACE,0BAAMA,UAAU,eAAhB,kCAEF,wBAAIA,UAAU,WAAd,wBACE,0BAAMA,UAAU,eAAhB,6BAEF,wBAAIA,UAAU,WAAd,eACE,0BAAMA,UAAU,eAAhB,sDAEF,wBAAIA,UAAU,WAAd,kBACE,0BAAMA,UAAU,eAAhB,8DAGLvB,KAAKiF,YAER,6BACA,2BAAQ9E,GAAG,YAAYC,MAAO,CAACC,QAASL,KAAKZ,MAAM2C,gBAAkB,QAAU,SAC9E,4BACI,wBAAIR,UAAU,WAAd,oBACC,0BAAMA,UAAU,eAAhB,qDAED,wBAAIA,UAAU,WAAd,aACC,0BAAMA,UAAU,eAAhB,oDAED,8BAEJvB,KAAKkF,kBAEN,2BAAOnC,KAAK,SAAUC,MAAM,iBAAiBO,QAASvD,KAAKmF,SAASjD,KAAKlC,QACzE,6BACA,6BACA,6BACA,uBAAGuB,UAAU,WAAb,2BACE,0BAAMA,UAAU,eAAhB,wBAEF,6BAAMvB,KAAKoF,qBACX,6BACA,6BACA,2BAAOjF,GAAG,MAAM4C,KAAK,SAASC,MAAM,qB,GA1QlB/B,aCyGjBoE,MAlGf,WAAe,MAGYC,mBAAS,kBAAC,EAAD,OAHrB,mBAGPC,EAHO,KAGCC,EAHD,OAI2BF,mBAAS,+BAJpC,mBAING,EAJM,KAISC,EAJT,OAKmBJ,mBAAS,+BAL5B,mBAKNK,EALM,KAKKC,EALL,OAMmBN,mBAAS,IAN5B,mBAMNO,EANM,KAMIC,EANJ,KA0Db,OAbAC,qBAAU,WAERzG,MADY,mCAEXC,MACC,SAACC,GACC,OAAOA,EAASwG,UAEnBzG,MAAK,SAAAE,GACJqG,EAAYrG,MAEbE,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,SAI9B,6BACC,4BAAQO,GAAG,QAEN,yBAAKA,GAAG,QACP0F,EACA,uBAAG1F,GAAG,SAAS8F,KAAK,yBAAyB1C,QAjCtD,WAEEjE,MADY,iCAEXC,MACC,SAACC,GACC,OAAOA,EAASC,UAEnBF,MAAK,SAAAE,GACJ,OAAOA,KAERE,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,QAuBvB,YAGH,6BACI,uBAAGqG,KAAK,GAAG9F,GAAG,cACd,4BACI,6BACA,4BACI,uBAAG8F,KAAK,QAAQ1C,QA/DlC,WACEiC,EAAQ,kBAAC,EAAD,OACRE,EAAe,+BACfE,EAAW,iCA4DK,SAEJ,6BACA,4BACI,uBAAGK,KAAK,SAAS1C,QA5DnC,WACEmC,EAAe,kBAAC,EAAD,OACfF,EAAQ,+BACRI,EAAW,iCAyDK,UAEJ,6BACA,4BACI,uBAAGK,KAAK,WAAW1C,QAzDrC,WACEmC,EAAe,+BACfF,EAAQ,+BACRI,EAAW,kBAAC,EAAD,SAsDK,YAEJ,6BACA,4BACI,uBAAGK,KAAK,KAAR,eAMd,6BACCV,EACAE,EACAE,IC1FaO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvH,MAAK,SAAAwH,GACJA,EAAaC,gBAEdrH,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMqH,c","file":"js/main.aba99adf.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Chart from \"react-google-charts\";\r\n\r\nclass ChartGoogle extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data : []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = 'http://127.0.0.1:5000/chart/';\r\n\r\n    fetch(url)\r\n    .then(\r\n      (response) => {\r\n        return response.json();\r\n      })\r\n    .then(json => {\r\n      this.setState({\r\n        data: json\r\n      })\r\n    })\r\n    .catch((error) => console.log(error));\r\n  }\r\n\r\n  render() {\r\n    let dataChart= [\r\n        [\r\n          'Date',\r\n          'Invested',\r\n          'Portfolio',\r\n        ]\r\n      ];\r\n      for (let element of this.state.data) {\r\n          dataChart.push([element[\"date\"], element[\"invested\"], element[\"portfolioCost\"]])\r\n        }\r\n\r\n      return (\r\n        <div>\r\n          <div id='user'>      \r\n            <p style={{display: this.state.data.length ? 'none' : 'block'}}>No data to show</p>\r\n          </div>\r\n          <div style = {{display: this.state.data.length ? 'block' : 'none' }}>\r\n          <Chart\r\n            height={'500px'}\r\n            chartType=\"LineChart\"\r\n            loader={<div>Loading Chart</div>}\r\n            data = {dataChart}\r\n            options={{\r\n              title: 'Cost of Portfolio vs Invested money',\r\n              colors: ['#D700CD', '#1D19DB'],\r\n              backgroundColor: '#ddd3e2',\r\n                hAxis: {\r\n                  title: 'Date',\r\n                    },\r\n                vAxis: {\r\n                  title: 'Cost',\r\n                    },\r\n                }}\r\n            rootProps={{ 'data-testid': '2' }}/>\r\n          </div>\r\n\r\n        </div>\r\n        );\r\n      };\r\n  }\r\n  \r\nexport default ChartGoogle;","\r\nimport React, { Component} from 'react';\r\n\r\nclass Currency extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            exchangeRate: []\r\n        };\r\n      }\r\n\r\ncomponentDidMount() {\r\n    const url = `https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=${this.props.currency}&to_currency=ILS&apikey=PA9D235Y6KPZ46HS`;\r\n\r\n    fetch(url)\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      this.setState({\r\n        exchangeRate: data[\"Realtime Currency Exchange Rate\"]\r\n      })\r\n    })\r\n    .catch((error) => console.log(error));\r\n    }\r\n\r\nrender() {\r\n    return (\r\n        <div className='ExchangeRate'>\r\n            <br />\r\n            <br />\r\n            <table >\r\n                <tr>\r\n                    <th>Last update time</th>\r\n                    <td>{this.state.exchangeRate[\"6. Last Refreshed\"]}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>1 {this.state.exchangeRate['1. From_Currency Code']}</th>\r\n                    <td>{this.state.exchangeRate['5. Exchange Rate']} ILS</td>\r\n                </tr>\r\n            </table>        \r\n            <br />   \r\n        </div> \r\n        )\r\n    }\r\n}\r\n\r\n\r\n \r\n\r\nexport default Currency;","import React from 'react';\r\nimport Currency from './Currency';\r\n\r\n\r\nfunction ExchangeRate() {\r\n\r\n   return(\r\n    <div id='ExchangeRate'>\r\n        <p>Current Exchange Rate</p>\r\n        <Currency currency='EUR'/>\r\n        <Currency currency='USD'/>\r\n    </div>\r\n   )\r\n}\r\n\r\nexport default ExchangeRate","import React, { Component}  from 'react';\r\n\r\nclass DetailedPortfolio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            myShares : [],      // list of shares included to portfolio\r\n            mySharesValues: [], // list of new count of shares from portfolio in case user wants to buy/sell\r\n            listSharesMOEX: [], // listing of shares + current prices takesn from MOEX exchange\r\n            newShares: [],      // list of new shares in case user wants to add new shares from MOEX exchange list \r\n            newSharesValues: [],// count of new shares \r\n            showTableHeader: false,\r\n            investedMoney: 0,\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n      // receive current portfolio for the user from the backend\r\n        const url = 'http://127.0.0.1:5000/portfolio_details';\r\n\r\n        fetch(url)\r\n        .then(\r\n          (response) => {\r\n            return response.json();\r\n          })\r\n        .then(json => {\r\n          this.setState({\r\n            myShares: json\r\n          })\r\n        })\r\n        .catch((error) => console.log(error));\r\n\r\n        // recieve list of MOEX exchange shares with prices\r\n        const urlShares = 'http://127.0.0.1:5000/shareslist';\r\n\r\n        fetch(urlShares)\r\n        .then(\r\n          (response) => {\r\n            return response.json();\r\n          })\r\n        .then(json => {\r\n          json.unshift({\"name\":\"\",\"price\":\"\",\"ticker\":\"Choose from the list\"})\r\n          this.setState({\r\n            listSharesMOEX: json\r\n          })\r\n        })\r\n        .catch((error) => console.log(error));\r\n\r\n      }  \r\n\r\n      // creates table with current portfolio of the user\r\n      createUI(){\r\n        const classState = this\r\n      return this.state.myShares.map((row, i) =>\r\n        <tr key={i}>\r\n            <td>{row.ticker}</td>\r\n            <td>{row.cnt}</td>\r\n            <td>{row.price}</td>\r\n            <td>{row.curcost.toFixed(2)}</td>\r\n            <td><input name='mySharesValues' type=\"number\" value={classState.state.mySharesValues[i]||''} onChange={classState.handleChange.bind(this, i)}/></td>\r\n        </tr> \r\n      )\r\n    }\r\n\r\n      //creates table for the newly added shares\r\n      createUIForNew(){\r\n        const classState = this\r\n        return classState.state.newSharesValues.map((el, i) => \r\n            <tr key={i}>\r\n              <td> \r\n                <select  onChange={classState.handleNew.bind(this, i)}>\r\n                {classState.selectOptions()}\r\n                </select> \r\n              </td>\r\n              <td>\r\n                <input type=\"number\" name='newSharesValues' min='0' value={classState.state.newSharesValues[i]||''} onChange={classState.handleChange.bind(this, i)}/>\r\n              </td>\r\n              <td>\r\n                <input type='button' value='remove' onClick={classState.removeClick.bind(this, i)}/>\r\n              </td>\r\n            </tr>          \r\n        )\r\n      }\r\n\r\n      // process event of changing count of existing shares {mySharesValues} or newly added {newSharesValues}\r\n      // creates array with new count\r\n      handleChange(i, event) {\r\n        let values = (event.target.name === 'mySharesValues'? [...this.state.mySharesValues]: [...this.state.newSharesValues]) \r\n        values[i] = event.target.value;\r\n        let name = event.target.name;\r\n        this.setState({\r\n          [name]: values\r\n        })\r\n      }\r\n\r\n\r\n      // forming a list for select option from list of MOEX shares\r\n      // the list shows Ticker + price \r\n      selectOptions() {\r\n        const classState = this;\r\n        let shares = classState.state.listSharesMOEX;\r\n        let optionItems = shares.map((el) =>\r\n            <option key={el.ticker}>{el.ticker} - {el.price}</option>\r\n        );\r\n        return optionItems;\r\n      }\r\n\r\n\r\n      // forms array of newly added shares\r\n      handleNew(i, event) {\r\n        let shares = [...this.state.newShares];\r\n        let val = event.target.value;\r\n        shares[i] = {ticker: val.substring(0, 5), price: val.substring(7)};\r\n        this.setState({\r\n          newShares: shares\r\n        });\r\n      }\r\n\r\n\r\n      // add row event: adding additional row for the new shares table\r\n      addClick(){\r\n        this.setState(prevState => ({\r\n         showTableHeader: true,\r\n         newSharesValues: [...prevState.newSharesValues, '']\r\n          })\r\n        )\r\n      }\r\n      \r\n      // remove row event: removing row from the new shares table\r\n      removeClick(i){\r\n         let newSharesValues = [...this.state.newSharesValues];\r\n         newSharesValues.splice(i,1);\r\n         this.setState({\r\n           newSharesValues\r\n          });\r\n      }\r\n\r\n      // calculates the total cost of the shares that user is going to buy/sel\r\n      calculateInvested(){\r\n        let money=0.0;\r\n        // calculating cost of added/removed shares from portfolio\r\n        for (let i=0; i<this.state.mySharesValues.length; i++) {\r\n          if (!Number.isNaN(parseFloat(this.state.mySharesValues[i]))) {\r\n            money += parseFloat(this.state.myShares[i].price)*parseFloat(this.state.mySharesValues[i])\r\n          }   \r\n        }\r\n        // calculating cost of the new shares\r\n        for (let i=0; i<this.state.newSharesValues.length; i++) {\r\n          if (!Number.isNaN(parseFloat(this.state.newSharesValues[i]))) {\r\n            money += parseFloat(this.state.newShares[i].price)*parseFloat(this.state.newSharesValues[i])\r\n          }\r\n        }\r\n        money = money.toFixed(2);\r\n        return money;\r\n      }\r\n\r\n     \r\n      // submit (buy/add) button event\r\n      handleSubmit(event) {\r\n        let finalList=[];\r\n        let cnt = 0;\r\n\r\n        //Processing existing shares. If there is new count => sum previous and new shares\r\n        //if no new count => leave the olf count\r\n        \r\n        for (let i=0; i<this.state.myShares.length; i++) {\r\n          if (!Number.isNaN(parseFloat(this.state.mySharesValues[i]))) {\r\n              cnt = parseInt(this.state.mySharesValues[i])\r\n              finalList.push({\r\n                    'ticker': this.state.myShares[i].ticker,\r\n                    'price':  this.state.myShares[i].price,\r\n                    'cnt': cnt\r\n              }) \r\n          }; \r\n        }\r\n           \r\n        //Processing new shares list\r\n        //If user didn't enter any count => we do not add this share to the list\r\n\r\n        for (let i=0; i<this.state.newShares.length; i++) {\r\n          if (!Number.isNaN(parseFloat(this.state.newSharesValues[i]))) {\r\n              finalList.push({\r\n                    'ticker': this.state.newShares[i].ticker,\r\n                    'price':  this.state.newShares[i].price,\r\n                    'cnt': parseInt(this.state.newSharesValues[i])\r\n                    }) \r\n            } \r\n          };\r\n\r\n          /// add invested\r\n          //  let money = this.calculateInvested();\r\n          //  finalList.push({\r\n          //    'invested': money\r\n          //  })\r\n\r\n            \r\n        // sending the formed list to the backend   \r\n        fetch('http://127.0.0.1:5000/dataupdate/',\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify(finalList),\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          }).then(\r\n            (response)=>{\r\n              if (response.status === 200){\r\n              alert(\"Message Sent.\"); \r\n              this.resetForm()\r\n              } else if (response.status === 400){\r\n                alert(\"Message failed to send.\")\r\n              }\r\n          })\r\n          event.preventDefault();\r\n      }   \r\n          \r\n    render() {\r\n     \r\n      return (\r\n        <div id='Details'>\r\n            <br />\r\n            <form onSubmit={this.handleSubmit}>\r\n              <table style={{display: this.state.myShares.length ? 'block' : 'none' }}>\r\n                <tr>\r\n                    <th className=\"tooltip\">Ticker\r\n                      <span className=\"tooltiptext\">Symbol of FTE used in Moscow Exchange</span>\r\n                    </th>\r\n                    <th className=\"tooltip\">Count\r\n                      <span className=\"tooltiptext\">Number of shares in portfolio</span>\r\n                    </th>\r\n                    <th className=\"tooltip\">Current Price (per 1)\r\n                      <span className=\"tooltiptext\">Current price of 1 share</span>\r\n                    </th>\r\n                    <th className=\"tooltip\">Current Cost\r\n                      <span className=\"tooltiptext\">Current cost in Portfolio according to MOEX price</span>\r\n                    </th>\r\n                    <th className=\"tooltip\">Buy/Sell Amount\r\n                      <span className=\"tooltiptext\">Incert positive number to buy or negative number to sell</span>\r\n                    </th>\r\n                </tr>               \r\n                {this.createUI()}\r\n              </table>\r\n              <br />\r\n              <table  id='newShares' style={{display: this.state.showTableHeader ? 'block' : 'none' }}>\r\n               <tr>\r\n                   <th className=\"tooltip\">Ticker with price\r\n                    <span className=\"tooltiptext\">Choose FTE from the list. Format: Ticket - Price</span>\r\n                   </th>\r\n                   <th className=\"tooltip\">Buy Amount\r\n                    <span className=\"tooltiptext\">Incert number of shares (only positive!) to buy</span>\r\n                   </th>\r\n                   <th></th>\r\n               </tr>\r\n              {this.createUIForNew()}\r\n              </table>\r\n              <input type='button'  value='add new shares' onClick={this.addClick.bind(this)}/>\r\n              <br />\r\n              <hr />\r\n              <br />\r\n              <p className=\"tooltip\"> Total amount to invest:\r\n                <span className=\"tooltiptext\">Total sum to invest</span>\r\n              </p>\r\n              <div>{this.calculateInvested()}</div>\r\n              <br />\r\n              <hr />\r\n              <input id='Buy' type=\"submit\" value=\"Buy Shares\" />\r\n            </form>\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\n\r\nexport default DetailedPortfolio\r\n\r\n","\nimport React, { useState, useEffect }  from 'react';\nimport './css/App.css';\nimport ChartGoogle from './componets/ChartGoogle';\nimport ExchangeRate from './componets/ExchangeRate';\nimport DetailedPortfolio from './componets/DetailedPortfolio';\n\n\n\nfunction App() {\n\n  //Initial states\n  const[isHome, setHome] = useState(<ExchangeRate />);\n  const [isChartGoogle, setChartGoogle] = useState(<div></div>);\n  const [isDetails, setDetails] = useState(<div></div>);\n  const [userName, setUserName] = useState('');\n\n  // Home screen\n  function showHome() {\n    setHome(<ExchangeRate />);\n    setChartGoogle(<div></div>);\n    setDetails(<div></div>)\n  } \n  \n  //Chart screen\n  function showChartGoogle() {\n    setChartGoogle(<ChartGoogle />);\n    setHome(<div></div>);\n    setDetails(<div></div>)\n  }\n\n  //Detailed Portfolio screen\n  function showDetails() {\n    setChartGoogle(<div></div>);\n    setHome(<div></div>);\n    setDetails(<DetailedPortfolio />)\n    //console.log(new Data().render())\n  }\n\n  //logout\n  function handleLogout() {\n    const url = 'http://127.0.0.1:5000/logout/';\n    fetch(url)\n    .then(\n      (response) => {\n        return response.json();\n      })\n    .then(json => {\n      return json\n    })\n    .catch((error) => console.log(error));\n  }\n\n  //get user name\n  useEffect(() =>{\n    const url = 'http://127.0.0.1:5000/username/';\n    fetch(url)\n    .then(\n      (response) => {\n        return response.text();\n      })\n    .then(json => {\n      setUserName(json);\n    })\n    .catch((error) => console.log(error));\n  })\n\n  return (\n    <div>\n     <header id=\"grid\">\n\n          <div id=\"user\" >\n          {userName}     \n           <a id=\"logout\" href=\"http://127.0.0.1:5000/\" onClick={handleLogout}> LogOut</a>\n          </div>\n\n        <nav>\n            <a href=\"\" id=\"menu-icon\"></a>\n            <ul>\n                <li></li>\n                <li>\n                    <a href=\"#Home\" onClick={showHome}>Home</a>\n                </li>\n                <li></li>\n                <li>\n                    <a href=\"#Chart\" onClick={showChartGoogle}>Chart</a>\n                </li>\n                <li></li>\n                <li>\n                    <a href=\"#Details\" onClick={showDetails}>Details</a>\n                </li>\n                <li></li>\n                <li>\n                    <a href=\"#\">Contact</a>\n                </li>\n                \n            </ul>\n        </nav>\n      </header> \n      <br />\n      {isHome}\n      {isChartGoogle}\n      {isDetails} \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}